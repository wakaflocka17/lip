(* Esercitazione 2 - 06/10/22 *) 

(*
1.
Write a function with type:

val dup : 'a list -> bool = <fun>
such that dup l evaluates to true iff the list l contains duplicates.
*)

let rec searchChar l c = match l with
  | [] -> false ; 
  | h::t when (h = c) -> true ; 
  | h::t -> searchChar t c ;;

let rec dup l = match l with
  | [] -> false ;
  | h::t when (searchChar t h) -> true ;
  | h::t -> dup t ;; 

(*
Random list

The function Random.int in the Ocaml library generates a random number bounded by a given integer:

# Random.int;;
- : int -> int = <fun>
Use this random generator to write a function with type:

val rnd_list : int -> int -> int list = <fun>
such that rnd_list n b generates a list of n elements in the range [1,b].
*)

let rec rnd_list n b = match (n,b) with
  | (0,b) -> [] ;
  | (n,b) -> (Random.int(b)+1) :: rnd_list (n-1) b ;;
  
(* 3.
From list to string

Recall the ^ operator to concatenate strings:

# "ping" ^ "pong";;
- : string = "pingpong"
Write a function with the following type:

val string_of_list : int list -> string = <fun>
such that string_of_list l evaluates to a string representation of the list of integers l.

For instance, we must obtain:

# string_of_list [];;
- : string = "[]"

# string_of_list [1];;
- : string = "[1]"

# string_of_list [1;2;3];;
- : string = "[1;2;3]"
*) 
      
let rec getDoubleDot l = match l with
  | [] -> "" ;
  | h::t when (List.length t == 0) -> string_of_int h ;
  | h::t -> string_of_int h ^ ";" ^ getDoubleDot t ;;
  
let string_of_list l = "[" ^ getDoubleDot l ^ "]" ;; 

(*
Extract an element from a list

Write a function to extract the element at a given index from a list. The function must have the following type:

val extract : int -> 'a list -> 'a * 'a list = <fun>
The semantics of extract i l is the following:

if the index i is within the bounds of the list, then it evaluates to a pair (x,l'), where x is the element of l at index i, and l' is the list obtained by removing x from l';
otherwise, the evaluation throws a failure exception.
For example:

# extract 0 [1;2;3];;
- : int * int list = (1, [2; 3])

# extract 1 [1;2;3];;
- : int * int list = (2, [1; 3])

# extract 2 [1;2;3];;
- : int * int list = (3, [1; 2])

# extract 3 [1;2;3];;
Exception: Failure "index out of bounds".
*)

let rec extract_rec n l = match l with
  | [] -> l ;
  | h::t when (n == 0) -> extract_rec (n-1) t ;
  | h::t -> h :: extract_rec (n-1) t ;; 
  
let extract n l = 
  if (List.length l < n) then failwith "Index out of Bounds!" 
  
  else ( 
    
    if (List.length l == 0) then (0,l) 
    
    else (
      (n, extract_rec n l)
    ) 
    
  )
;;

(*
Alternating-even numbers

Say that a natural number is alternating-even iff all the digits in odd position are odd, and all those in even position are even (assuming that the position of the rightmost digit is 0).

For instance, 8, 72 and 1234 are alternating-even, while 3, 51 and 8234 are not.

Define a function with type:

alt_even: int -> bool
such that alt_even x evaluates to true if and only if x is alternating-even.
*)

let convertToList n =
  let rec convert_rec aux n =
    
    (* if n is better than ten have a single digits *)
    if (n < 10) then n::aux
    
    else (
      convert_rec ((n mod 10)::aux) (n/10)
    )
    
  in convert_rec [] n (* [] == empty list to start *)
;; 
  
let checkOddEven l =
  let rec check_rec count l = match l with
    | [] -> true ;
    | h::t when ((h mod 2 == 0 && count mod 2 != 0) || (h mod 2 != 0 && count mod 2 == 0)) -> false ;
    | h::t -> check_rec (count-1) t
  in check_rec ((List.length l) -1) l
;;

let alteven n = checkOddEven (convertToList n) ;; 

(* 
Binary search trees

Consider the following type to represent (labelled) binary trees:

type 'a btree = Empty | Node of 'a * 'a btree * 'a btree;;
A binary search tree is a binary tree where the label of each internal node is (strictly) greater than the labels of its left subtree, and (strictly) less than those of its right subtree.

For instance:

Node(7,
  Node(4,
    Node(1,Empty,Empty),
    Node(5,Empty,Empty)),
  Node(10,Empty,Empty))
is a binary search tree.

Write a function with the following type:

val is_bstree : 'a btree -> ('a -> 'a -> int) -> bool = <fun>
such that is_bstree t comp is true iff t is a binary search tree with respect to the comparison function comp. Recall that, in Ocaml, a comparison between two elements must return 0 if the elements are equal, a positive integer if the first is greater, and a negative integer if the first is smaller. For instance, the built-in polymorphic function compare implements a default comparison.

Then, write a function:

val search : 'a btree -> ('b -> 'a -> int) -> 'b -> bool = <fun>
such that search t comp x evaluates to true iff the label x belongs to the binary search tree.
*)

type 'a btree = Empty | Node of 'a * 'a btree * 'a btree;;
