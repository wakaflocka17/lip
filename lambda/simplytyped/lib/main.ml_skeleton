open Ast

(* string_of_type : ty -> string *)

let rec string_of_type = function
    _ -> failwith "TODO"
    
(* string_of_term : term -> string *)

let rec string_of_term = function
    _ -> failwith "TODO"                    

let parse (s : string) : term =
  let lexbuf = Lexing.from_string s in
  let ast = Parser.prog Lexer.read lexbuf in
  ast


(**********************************************************************
 max_nat : term -> int

 max_nat t computes the least n such that: 
 for all i : xi in vars_of_term t => i < n
  **********************************************************************)

let rec vars_of_term = function
  | Var x -> [x]
  | Abs(x,_,t) -> x::(vars_of_term t)
  | App(t1,t2) -> (vars_of_term t1) @ (vars_of_term t2)
  | True -> []
  | False -> []
  | Not(e) -> vars_of_term e
  | And(e1,e2) -> vars_of_term e1 @ vars_of_term e2
  | Or(e1,e2) -> vars_of_term e1 @ vars_of_term e2
  | If(e0,e1,e2) -> vars_of_term e0 @ vars_of_term e1 @ vars_of_term e2
  | Zero -> []
  | Succ(e) | Pred(e) | IsZero(e) -> vars_of_term e

let rec pow a = function
  | 0 -> 1
  | 1 -> a
  | n -> let b = pow a (n / 2) in
    b * b * (if n mod 2 = 0 then 1 else a)
            
let is_digit = function '0' .. '9' -> true | _ -> false

let explode s = List.map (fun x -> String.make 1 x |> int_of_string) (List.filter is_digit (List.init (String.length s) (String.get s)))

let nat_of_var xl = List.fold_left (fun x y -> x + y) 0 (List.mapi (fun i x -> x * (pow 10 i)) (List.rev (explode xl)))

let rec max_of_list = function 
  | [] -> 0
  | x::xs -> max x (max_of_list xs)
                
let max_nat t =
  let xl = vars_of_term t in
  let nl = List.map nat_of_var xl in
  1 +  max_of_list nl


(**********************************************************************
 is_free : string -> term -> bool

 Usage: is_free x t = true iff the variable x occurs free in t
 **********************************************************************)

let rec is_free _ = function
    _ -> failwith "TODO"


(**********************************************************************
 rename : string -> string -> term -> term

 Usage: rename x x' t replaces all free occurrences of x in t as x'

 Pre: x' does not occur (free or bound) in t
 **********************************************************************)

let rec rename _ _ = function
    _ -> failwith "TODO"


(**********************************************************************
 equiv : term -> term -> bool

 Usage: equiv t1 t2 = true iff t1 and t2 are alpha-equivalent
 **********************************************************************)

let rec equiv_rec t1 t2 _ = match (t1,t2) with
    _ -> failwith "TODO"
    
let equiv t1 t2 = fst (equiv_rec t1 t2 (max (max_nat t1) (max_nat t2)))
                   

(**********************************************************************
 subst : string -> term -> int -> term -> term * int

 Usage: subst x t1 vars t2 = ([x -> t1] t2,vars')  
        where vars is the index of the next variable to be used for renaming
        and vars' is the next available index after the substitution
 **********************************************************************)

let rec subst _ _ _ = function
    _ -> failwith "TODO"            


(**********************************************************************
 typecheck : tenv * term -> ty
 **********************************************************************)

exception TypeError of string
exception UnboundVar of string
    
type tenv = string -> ty

let bot = fun x -> raise (UnboundVar x)

let bind f x v = fun y -> if y=x then v else f y

let rec typecheck (_:tenv) = function
    _ -> failwith "TODO"


(**********************************************************************
 is_nv : term -> bool

 Usage: is_nv t = true iff t is a numerical value
 **********************************************************************)

let rec is_nv = function
    Zero -> true
  | Succ(e) -> is_nv e
  | _ -> false

(**********************************************************************
 is_val : term -> bool

 Usage: is_val t = true iff t is a value (i.e., a lambda-abstraction)
 **********************************************************************)

let is_val = function
    Abs _ -> true
  | True -> true
  | False -> true
  | n when is_nv n -> true
  | _ -> false


(**********************************************************************
 trace1 : int -> term -> term * int

 Usage: trace1 vars t performs 1 step of the small-step call-by-value semantics,
 returning the obtained term and the index of the first fresh variable

 Pre:  xk does not occur in t, for all k>=vars

 Post: if trace_rec n i t = (t',i') then xk does not occur in t', 
       for all k>=i'
 **********************************************************************)

exception NoRuleApplies

let rec trace1 vars = function
  | _ -> raise NoRuleApplies


(**********************************************************************
 trace_rec : int -> term -> term list

 Usage: trace_rec i t performs one or more steps of the small-step semantics,
 until a non-reducible term is found

 Pre:  xk does not occur in t, for all k>=i
 **********************************************************************)

let rec trace_rec vars t =
  try
    let (t',vars') = trace1 vars t
    in t::(trace_rec vars' t')
  with NoRuleApplies -> [t]


(**********************************************************************
 trace : term -> term list

 Usage: trace t performs one or more steps of the small-step semantics
 until a non-reducible term is found
 **********************************************************************)

let trace t =
  let _ = typecheck bot t in
  trace_rec (max_nat t) t
